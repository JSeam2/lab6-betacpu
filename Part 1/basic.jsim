//.include
.include "import/nominal.jsim"
.include "import/stdcell.jsim"
.include "ctl.jsim"
// alu is included here
.include "pc.jsim"
.include "regfile.jsim"
.include "checkoff/lab6basicblock.jsim"

// Notes for Convenience:
// instruction address (ia[31:0], output). 
//      Address of next instruction to be executed.

// instruction data (id[31:0], input)
//      After the appropriate propagation delay, the memory will
//      drive these signals with the contents of the memory location 
//      specified by ia[31:0].

// data memory address (ma[31:0], output)
//     Address of data memory location to be read or written.

// memory output enable (moe, output)
//      Set to 1 when the Beta wants the memory to read the
//      memory location specified by ma[31:0].

// memory read data (mrd[31:0], input)
//      If moe is 1, the memory will drive these signals with
//      the contents of the memory location specified by ma[31:0].

// memory write enable (wr, output)
//      Set to 1 when the Beta wants to store into the memory
//      location specified by ma[31:0] at the end of the current cycle. 
//      Becareful regarding valid logic values

// memory write data (mwd[31:0], output).
//      If wr is 1, this is the data that will be written into
//      memory at the end of the current cycle.






// TOOLS
// SIGN EXTENDER
.subckt sext in[15:0] out[31:0]
.connect out[31:16] in15
.connect in[15:0] out[31:0]
.ends

// Zero Detector
.subckt zero s[31:0] z
XORSTAGE1 s[7:0] s[15:8] s[23:16] s[31:24] int[7:0] or4
XORSTAGE2 int[1:0] int[3:2] int[5:4] int[7:6] fin[1:0] or4
XORSTAGE3 fin[1:0] z nor2
.ends

// 2 Way 32 Bit mux
.subckt mux2_32 sel A[31:0] B[31:0] out[31:0]
Xmux sel#32 A[31:0] B[31:0] out[31:0] mux2
.ends

// 3 WAY 32 bit mux ignore an option
.subckt mux3_32 sel[1:0] inputA[31:0] inputB[31:0] inputC[31:0] out[31:0]
xmux sel0#32 sel1#32 inputA[31:0] inputB[31:0] inputC[31:0] 0#32 out[31:0] mux4
.ends

// 5 way 32 bit mux
.subckt mux5_32 sel[2:0] A[31:0] B[31:0] C[31:0] D[31:0] E[31:0] out[31:0]
xmuxA sel0#32 sel1#32 A[31:0] B[31:0] C[31:0] D[31:0] int[31:0] mux4
xmuxB sel2#32 int[31:0] E[31:0] out[31:0] mux2
.ends



// BETA

.subckt beta clk reset ia[31:0] id[31:0] ma[31:0]
+ moe mrd[31:0] wr mwd[31:0] 

// pc
xpc clk reset ia[31:0] pc

// regfile
xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] 
+ wdata[31:0] radata[31:0] rbdata[31:0] regfile

// ctl
xctl reset id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr ctl

// buffer for sext
xbuff1 id[15:0] inst[15:0] buffer
xbuff2 id[15]#16 inst[31:16] buffer
xbuff3 rbdata[31:0] mwd[31:0] buffer

// BSEL mux
xbselmux bsel#32 rbdata[31:0] inst[31:0] bout[31:0] mux2

// ALU
xalu alufn[5:0] radata[31:0] bout[31:0] ma[31:0] z v n alu

// WDSEL mux
xwdselmux wdsel[0]#32 wdsel[1]#32 0#32 ma[31:0] mrd[31:0] 0#32 wdata[31:0] mux4

.ends




