.include "import/nominal.jsim"
.include "import/stdcell.jsim"
.include "ctl.jsim"
.include "pc.jsim"
.include "regfile.jsim"
.include "checkoff/lab6basicblock.jsim"

// Notes for Convenience:
// instruction address (ia[31:0], output). 
//      Address of next instruction to be executed.

// instruction data (id[31:0], input)
//      After the appropriate propagation delay, the memory will
//      drive these signals with the contents of the memory location 
//      specified by ia[31:0].

// data memory address (ma[31:0], output)
//     Address of data memory location to be read or written.


// memory output enable (moe, output)
//      Set to 1 when the Beta wants the memory to read the
//      memory location specified by ma[31:0].

// memory read data (mrd[31:0], input)
//      If moe is 1, the memory will drive these signals with
//      the contents of the memory location specified by ma[31:0].

// memory write enable (wr, output)
//      Set to 1 when the Beta wants to store into the memory
//      location specified by ma[31:0] at the end of the current cycle. 
//      Becareful regarding valid logic values

// memory write data (mwd[31:0], output).
//      If wr is 1, this is the data that will be written into
//      memory at the end of the current cycle.






// TOOLS
// SIGN EXTENDER
.subckt sext in[15:0] out[31:0]
.connect out[31:16] in15
.connect in[15:0] out[31:0]
.ends

// 2 Way 32 Bit mux
.subckt mux2_32 sel A[31:0] B[31:0] out[31:0]
Xmux sel#32 A[31:0] B[31:0] out[31:0] mux2
.ends

// 3 WAY 32 bit mux ignore an option
.subckt mux3_32 sel[1:0] inputA[31:0] inputB[31:0] inputC[31:0] out[31:0]
xmux sel0#32 sel1#32 inputA[31:0] inputB[31:0] inputC[31:0] 0#32 out[31:0] mux4
.ends

// 5 way 32 bit mux
.subckt mux5_32 sel[2:0] A[31:0] B[31:0] C[31:0] D[31:0] E[31:0] out[31:0]
xmuxA sel0#32 sel1#32 A[31:0] B[31:0] C[31:0] D[31:0] int[31:0] mux4
xmuxB sel2#32 int[31:0] E[31:0] out[31:0] mux2
.ends



.subckt beta clk reset ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0] 
//+ radata[31:0] a[31:0] wdselout[31:0] bsel// for debugging
XPC clk reset ia[31:0] pc

//XPC clk reset pcsel[2:0] 
//+ vdd 0#27 vdd 0 0 0 // XAdr (0x8000_0008)
//+ vdd 0#27 0 vdd 0 0 // IllOp (0x8000_0004)
//+ radata[31:0] // JT
//+ sext_c[31:0]
//+ ia[31:0] ia_inc[31:0] addc[31:0]
//+ pc

XCTL reset ra_zero id[31:26] ra2sel bsel alufn[5:0] xwdsel[1:0] xwerf moe xwr xpcsel[2:0] asel xwasel ctl

// We now add lots of logic to implement IRQ, which takes over everything
XINV_PC31 ia31 user_mode inverter_2
XAND_IRQ irq user_mode irq_valid and2
XMUX_PCSEL irq_valid#3 xpcsel[2:0] vdd 0 0 pcsel[2:0] mux2
XMUX_WASEL irq_valid xwasel vdd wasel mux2
XMUX_WERF irq_valid xwerf vdd werf mux2
XMUX_WDSEL irq_valid#2 xwdsel[1:0] 0 0 wdsel[1:0] mux2
XMUX_WR irq_valid xwr 0 wr mux2


XREGFILE clk werf ra2sel id[20:16] id[15:11] wa[4:0] wdselout[31:0] radata[31:0] mwd[31:0] regfile

XSGNEXTEND id[15:0] sext_c[31:0] sext

XZERO radata[31:0] ra_zero zero

XASEL asel radata[31:0] 0 addc[30:0] a[31:0] mux2_32
XBSEL bsel mwd[31:0] sext_c[31:0] b[31:0] mux2_32

XWASEL wasel#5 id[25:21] 
+ vdd vdd vdd vdd 0 // XP (exception pointer) (R30)
+ wa[4:0] mux2

XALU alufn[5:0] a[31:0] b[31:0] ma[31:0] z v n alu

XWDSEL wdsel[1:0] ia_inc[31:0] ma[31:0] mrd[31:0] wdselout[31:0] mux3_32

.ends




