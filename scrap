// BETA
.subckt beta clk reset ia[31:0] id[31:0] ma[31:0]
+ moe mrd[31:0] wr mwd[31:0]


// SIGN EXTEND ID
xsext id[15:0] sext_c[31:0] sext

// PC
xpc clk reset ia[31:0] pc

// REGFILE
xregfile clk werf ra2sel id[20:16] id[15:11] wa[4:0]
    + wdselout[31:0] radata[31:0] mwd[31:0] regfile

// CTL
xctl reset id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr ctl



//BSELMUX
xbselmux bsel mwd[31:0] sext_c[31:0] b[31:0] mux2_32

xalu alufn[5:0] a[31:0] b[31:0] ma[31:0] z v n alu

//WDSELMUX
xwdselmux wdsel[0]#32 wdsel[1]#32 0#32 ma[31:0] mrd[31:0] 0#32 wdselout[31:0] mux4
.ends







//+ radata[31:0] a[31:0] wdselout[31:0] bsel// for debugging
XPC clk reset ia[31:0] pc

//XPC clk reset pcsel[2:0] 
//+ vdd 0#27 vdd 0 0 0 // XAdr (0x8000_0008)
//+ vdd 0#27 0 vdd 0 0 // IllOp (0x8000_0004)
//+ radata[31:0] // JT
//+ sext_c[31:0]
//+ ia[31:0] ia_inc[31:0] addc[31:0]
//+ pc


.subckt ctl reset id[31:26] ra2sel bsel alufn[5:0] xwdsel[1:0] werf moe wr
//XCTL reset ra_zero id[31:26] ra2sel bsel alufn[5:0] xwdsel[1:0] xwerf moe xwr xpcsel[2:0] asel xwasel ctl

// We now add lots of logic to implement IRQ, which takes over everything
//XINV_PC31 ia31 user_mode inverter_2
//XAND_IRQ irq user_mode irq_valid and2
//XMUX_PCSEL irq_valid#3 xpcsel[2:0] vdd 0 0 pcsel[2:0] mux2
//XMUX_WASEL irq_valid xwasel vdd wasel mux2
//XMUX_WERF irq_valid xwerf vdd werf mux2
//XMUX_WDSEL irq_valid#2 xwdsel[1:0] 0 0 wdsel[1:0] mux2
//XMUX_WR irq_valid xwr 0 wr mux2


XREGFILE clk werf ra2sel id[20:16] id[15:11] wa[4:0] wdselout[31:0] radata[31:0] mwd[31:0] regfile

XSGNEXTEND id[15:0] sext_c[31:0] sext

XZERO radata[31:0] ra_zero zero

XASEL asel radata[31:0] 0 addc[30:0] a[31:0] mux2_32
XBSEL bsel mwd[31:0] sext_c[31:0] b[31:0] mux2_32

XWASEL wasel#5 id[25:21] 
+ vdd vdd vdd vdd 0 // XP (exception pointer) (R30)
+ wa[4:0] mux2

XALU alufn[5:0] a[31:0] b[31:0] ma[31:0] z v n alu

XWDSEL wdsel[1:0] ia_inc[31:0] ma[31:0] mrd[31:0] wdselout[31:0] mux3_32
